@model List<CAPS.Models.Appointment>

@{
    ViewData["Title"] = "Appointments";
}

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2>@ViewData["Title"]</h2>
            @if (ViewBag.FilteredStaff != null)
            {
                <p class="text-muted mb-0">Showing appointments for: <strong>@ViewBag.FilteredStaff</strong></p>
                <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Show All Appointments
                </a>
            }
        </div>
        <div>
            <a asp-action="UpSert" class="btn btn-primary">
                <i class="bi bi-plus-lg"></i> New Appointment
            </a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Date & Time</th>
                    <th>Client</th>
                    <th>Service</th>
                    <th>Staff</th>
                    <th>Duration</th>
                    <th>Status</th>
                    <th>Cost</th>
                    <th>Products Used</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <div class="fw-bold">@item.AppointmentDate.ToString("MMM dd, yyyy")</div>
                            <small class="text-muted">@item.AppointmentTime.ToString()</small>
                        </td>
                        <td>
                            <div class="fw-bold">@item.Client?.FirstName @item.Client?.LastName</div>
                            <small class="text-muted">@item.Client?.PhoneNumber</small>
                        </td>
                        <td>
                            <div class="fw-bold">@item.Service?.Name</div>
                            <small class="text-muted">@item.Service?.Category</small>
                        </td>
                        <td>
                            @if (item.Staff != null)
                            {
                                <div class="fw-bold">@item.Staff.FullName</div>
                                <small class="text-muted">@item.Staff.Expertise</small>
                            }
                            else
                            {
                                <span class="text-muted">Not assigned</span>
                                <br />
                                <button type="button" class="btn btn-sm btn-outline-primary mt-1" 
                                        onclick="showAssignStaffModal(@item.AppointmentId, '@Html.Raw(item.Client?.FirstName + " " + item.Client?.LastName)', '@Html.Raw(item.AppointmentDate.ToString("MMM dd, yyyy"))', '@Html.Raw(item.AppointmentTime.ToString(@"hh\:mm"))', '@Html.Raw(item.Service?.Name)')" 
                                        title="Assign Staff">
                                    <i class="bi bi-person-plus"></i> Assign
                                </button>
                            }
                        </td>
                        <td>
                            <span class="badge bg-info">@item.Duration min</span>
                        </td>
                        <td>
                            @switch (item.Status?.ToLower())
                            {
                                case "scheduled":
                                    <span class="badge bg-primary">Scheduled</span>
                                    break;
                                case "confirmed":
                                    <span class="badge bg-success">Confirmed</span>
                                    break;
                                case "completed":
                                    <span class="badge bg-success">Completed</span>
                                    break;
                                case "cancelled":
                                    <span class="badge bg-danger">Cancelled</span>
                                    break;
                                case "no-show":
                                    <span class="badge bg-warning">No-Show</span>
                                    break;
                                default:
                                    <span class="badge bg-secondary">@item.Status</span>
                                    break;
                            }
                        </td>
                        <td>
                            @if (item.Cost.HasValue)
                            {
                                <span class="fw-bold">@item.Cost.Value.ToString("C")</span>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (item.Status?.ToLower() == "completed" && !string.IsNullOrEmpty(item.Notes) && item.Notes.Contains("[PRODUCTS USED]"))
                            {
                              
                                
                                    var productsUsedStart = item.Notes.IndexOf("[PRODUCTS USED]");
                                    var productsUsedEnd = item.Notes.IndexOf("\n", productsUsedStart);
                                    var productsUsedText = productsUsedEnd > 0 
                                        ? item.Notes.Substring(productsUsedStart, productsUsedEnd - productsUsedStart)
                                        : item.Notes.Substring(productsUsedStart);
                                    var productsUsed = productsUsedText.Replace("[PRODUCTS USED]", "").Trim();
                                
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var product in productsUsed.Split(','))
                                    {
                                        var trimmedProduct = product.Trim();
                                        if (!string.IsNullOrEmpty(trimmedProduct))
                                        {
                                            <div class="d-flex align-items-center">
                                                <span class="badge bg-success me-2">
                                                    <i class="bi bi-box-seam"></i>
                                                </span>
                                                <span class="fw-bold text-success">@trimmedProduct</span>
                                            </div>
                                        }
                                    }
                                }
                                </div>
                           
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td class="text-center">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-info" title="View Details" 
                                        onclick="showDetailsModal(@item.AppointmentId, '@Html.Raw(item.AppointmentDate.ToString("MMMM dd, yyyy"))', '@Html.Raw(item.AppointmentTime.ToString(@"hh\:mm"))', '@item.Duration', '@Html.Raw(item.Status)', '@Html.Raw(item.Cost?.ToString("C") ?? "Not set")', '@Html.Raw(item.Client?.FirstName + " " + item.Client?.LastName)', '@Html.Raw(item.Client?.PhoneNumber)', '@Html.Raw(item.Client?.Gender)', '@item.Client?.Age', '@Html.Raw(item.Service?.Name)', '@Html.Raw(item.Service?.Category)', '@Html.Raw(item.Staff?.FullName ?? "Not assigned")', '@Html.Raw(item.Staff?.Expertise ?? "")', '@Html.Raw(item.Notes ?? "")')">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <a asp-action="UpSert" asp-route-id="@item.AppointmentId" class="btn btn-sm btn-warning" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                @if (item.Status?.ToLower() == "scheduled" || item.Status?.ToLower() == "confirmed")
                                {
                                    <button type="button" class="btn btn-sm btn-success" title="Mark Complete" 
                                            onclick="completeAppointment(@item.AppointmentId)">
                                        <i class="bi bi-check-circle"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger" title="Cancel" 
                                            onclick="showCancelModal(@item.AppointmentId, '@Html.Raw(item.AppointmentDate.ToString("MMMM dd, yyyy"))', '@Html.Raw(item.AppointmentTime.ToString(@"hh\:mm"))', '@Html.Raw(item.Client?.FirstName + " " + item.Client?.LastName)', '@Html.Raw(item.Service?.Name)')">
                                        <i class="bi bi-x-circle"></i>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-danger" title="Delete" 
                                            onclick="showDeleteModal(@item.AppointmentId, '@Html.Raw(item.AppointmentDate.ToString("MMMM dd, yyyy"))', '@Html.Raw(item.AppointmentTime.ToString(@"hh\:mm"))', '@Html.Raw(item.Client?.FirstName + " " + item.Client?.LastName)', '@Html.Raw(item.Service?.Name)')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Model.Count == 0)
    {
        <div class="text-center my-5">
            <i class="bi bi-calendar-x h1 text-muted"></i>
            <h4 class="text-muted mt-3">No appointments found.</h4>
            <p class="text-muted">Start by scheduling your first appointment.</p>
            <a asp-action="UpSert" class="btn btn-primary">
                <i class="bi bi-plus-lg"></i> Schedule First Appointment
            </a>
        </div>
    }
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">
                    <i class="bi bi-calendar-event"></i> Appointment Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsModalBody">
                <!-- Content will be populated by JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Modal -->
<div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="cancelModalLabel">
                    <i class="bi bi-x-circle"></i> Cancel Appointment
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle"></i>
                    <strong>Note:</strong> This will mark the appointment as cancelled. You can provide a reason for the cancellation below.
                </div>
                <div id="cancelAppointmentDetails">
                    <!-- Content will be populated by JavaScript -->
                </div>
                <div class="mb-3">
                    <label for="cancellationReason" class="form-label fw-bold">
                        <i class="bi bi-chat-text"></i> Cancellation Reason (Optional)
                    </label>
                    <textarea class="form-control" id="cancellationReason" rows="3" 
                              placeholder="Please provide a reason for cancellation..."></textarea>
                    <div class="form-text">This will help track why appointments are being cancelled.</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Back</button>
                <button type="button" class="btn btn-warning" onclick="confirmCancel()">
                    <i class="bi bi-x-circle"></i> Confirm Cancellation
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="bi bi-exclamation-triangle"></i> Confirm Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> Are you sure you want to delete this appointment? This action cannot be undone.
                </div>
                <div id="deleteAppointmentDetails">
                    <!-- Content will be populated by JavaScript -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="bi bi-trash"></i> Confirm Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Assign Staff Modal -->
<div class="modal fade" id="assignStaffModal" tabindex="-1" aria-labelledby="assignStaffModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="assignStaffModalLabel">
                    <i class="bi bi-person-plus"></i> Assign Staff to Appointment
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="assignStaffAppointmentDetails">
                    <!-- Content will be populated by JavaScript -->
                </div>
                <div class="mb-3">
                    <label for="staffAssignmentSelect" class="form-label fw-bold">
                        <i class="bi bi-person"></i> Select Staff Member
                    </label>
                    <select class="form-select" id="staffAssignmentSelect">
                        <option value="">-- Select Staff --</option>
                    </select>
                    <div class="form-text">Choose the staff member to assign to this appointment.</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="confirmStaffAssignment()">
                    <i class="bi bi-person-check"></i> Assign Staff
                </button>
            </div>
        </div>
    </div>
  </div>
  
  <!-- Complete Appointment Modal -->
  <div class="modal fade" id="completeAppointmentModal" tabindex="-1" aria-labelledby="completeAppointmentModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
          <div class="modal-content">
              <div class="modal-header bg-success text-white">
                  <h5 class="modal-title" id="completeAppointmentModalLabel">
                      <i class="bi bi-check-circle"></i> Complete Appointment
                  </h5>
                  <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                  <div class="alert alert-info" role="alert">
                      <i class="bi bi-info-circle"></i>
                      <strong>Note:</strong> Please provide the number of products used during this appointment to help with inventory tracking.
                  </div>
                  
                  <div id="completeAppointmentDetails">
                      <!-- Content will be populated by JavaScript -->
                  </div>
                  
                  <form id="completeAppointmentForm" method="post" action="/Appointment/Complete">
                      @Html.AntiForgeryToken()
                      <input type="hidden" id="completeAppointmentId" name="id" />
                      
                      <div class="mb-3">
                          <label class="form-label fw-bold">
                              <i class="bi bi-box-seam"></i> Products Used *
                          </label>
                          <div id="productSelectionContainer">
                              <div class="product-row row mb-2">
                                  <div class="col-md-6">
                                      <select class="form-select product-select" name="ProductIds[]" required>
                                          <option value="">-- Select Product --</option>
                                          @foreach (var product in ViewBag.Products ?? new List<CAPS.Models.Products>())
                                          {
                                              <option value="@product.ProductId">@product.Name - @product.Category</option>
                                          }
                                      </select>
                                  </div>
                                  <div class="col-md-4">
                                      <input type="number" class="form-control quantity-input" name="Quantities[]" 
                                             min="1" max="100" required placeholder="Qty">
                                  </div>
                                  <div class="col-md-2">
                                      <button type="button" class="btn btn-outline-danger btn-sm remove-product" style="display: none;">
                                          <i class="bi bi-trash"></i>
                                      </button>
                                  </div>
                              </div>
                          </div>
                          <button type="button" class="btn btn-outline-primary btn-sm" onclick="addProductRow()">
                              <i class="bi bi-plus-lg"></i> Add Another Product
                          </button>
                          <div class="form-text">Select the products used during this appointment session.</div>
                      </div>
                      
                      <div class="mb-3">
                          <label for="CompletionNotes" class="form-label fw-bold">
                              <i class="bi bi-chat-text"></i> Completion Notes (Optional)
                          </label>
                          <textarea class="form-control" id="CompletionNotes" name="CompletionNotes" 
                                    rows="3" placeholder="Any additional notes about the completed appointment..."></textarea>
                      </div>
                  </form>
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                  <button type="button" class="btn btn-success" onclick="confirmComplete()">
                      <i class="bi bi-check-circle"></i> Mark as Complete
                  </button>
              </div>
          </div>
      </div>
  </div>
  
  <!-- Hidden form for actions -->
<form id="actionForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" id="actionId" name="id" />
    <input type="hidden" id="actionType" name="actionType" />
    <input type="hidden" id="cancellationReasonInput" name="cancellationReason" />
</form>

<style>
    .table th {
        white-space: nowrap;
        vertical-align: middle;
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .text-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
         .btn-group .btn {
         margin: 0 1px;
     }
     
     .badge {
         font-size: 0.75rem;
         padding: 0.5rem 0.75rem;
     }
     
     /* Modal styling */
     .modal-header {
         background-color: #f8f9fa;
         border-bottom: 1px solid #dee2e6;
     }
     
     .modal-footer {
         background-color: #f8f9fa;
         border-top: 1px solid #dee2e6;
     }
     
     /* Completion modal specific styling */
     .modal-header.bg-success {
         background-color: #198754 !important;
     }
     
     .btn-close-white {
         filter: invert(1) grayscale(100%) brightness(200%);
     }
     
     .modal-lg .modal-body {
         padding: 1.5rem;
     }
     
     .form-label.fw-bold {
         color: #495057;
         margin-bottom: 0.5rem;
     }
     
     .form-text {
         font-size: 0.875rem;
         color: #6c757d;
         margin-top: 0.25rem;
     }
     
     /* Product selection form styling */
     .product-row {
         border: 1px solid #dee2e6;
         border-radius: 0.375rem;
         padding: 0.75rem;
         background-color: #f8f9fa;
         transition: all 0.2s ease;
     }
     
     .product-row:hover {
         background-color: #e9ecef;
         border-color: #adb5bd;
     }
     
     .product-select, .quantity-input {
         border: 1px solid #ced4da;
         transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
     }
     
     .product-select:focus, .quantity-input:focus {
         border-color: #198754;
         box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
     }
     
     .remove-product {
         transition: all 0.2s ease;
     }
     
     .remove-product:hover {
         transform: scale(1.1);
     }
</style>

<script>
    let currentAppointmentId = null;

    function showDetailsModal(id, date, time, duration, status, cost, clientName, clientPhone, clientGender, clientAge, serviceName, serviceCategory, staffName, staffExpertise, notes) {
        const modalBody = document.getElementById('detailsModalBody');
        modalBody.innerHTML = `
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Appointment Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <dl class="row">
                                        <dt class="col-sm-4">Date:</dt>
                                        <dd class="col-sm-8">${date}</dd>
                                        <dt class="col-sm-4">Time:</dt>
                                        <dd class="col-sm-8">${time}</dd>
                                        <dt class="col-sm-4">Duration:</dt>
                                        <dd class="col-sm-8">${duration} minutes</dd>
                                        <dt class="col-sm-4">Status:</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge bg-${getStatusBadgeColor(status)}">${status}</span>
                                        </dd>
                                        <dt class="col-sm-4">Cost:</dt>
                                        <dd class="col-sm-8">${cost}</dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="fw-bold">Client Information:</h6>
                                    <p class="mb-1"><strong>${clientName}</strong></p>
                                    <p class="text-muted mb-1"><i class="bi bi-telephone"></i> ${clientPhone}</p>
                                    <p class="text-muted mb-3"><i class="bi bi-gender-ambiguous"></i> ${clientGender}, Age: ${clientAge}</p>
                                    
                                    <h6 class="fw-bold">Service:</h6>
                                    <p class="mb-1"><strong>${serviceName}</strong></p>
                                    <p class="text-muted mb-3">${serviceCategory}</p>
                                    
                                    <h6 class="fw-bold">Staff:</h6>
                                    <p class="mb-1"><strong>${staffName}</strong></p>
                                    <p class="text-muted mb-0">${staffExpertise}</p>
                                </div>
                            </div>
                                                         ${notes ? `<div class="mt-3"><h6>Notes:</h6><p class="text-muted">${notes}</p></div>` : ''}
                             ${notes && notes.includes('[PRODUCTS USED]') ? `<div class="mt-3"><h6>Products Used:</h6><p class="text-muted">${notes.substring(notes.indexOf('[PRODUCTS USED]')).split('\n')[0].replace('[PRODUCTS USED]', '').trim()}</p></div>` : ''}
                         </div>
                    </div>
                </div>
            </div>
        `;
        
        const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
        modal.show();
    }

    function showCancelModal(id, date, time, clientName, serviceName) {
        currentAppointmentId = id;
        const modalBody = document.getElementById('cancelAppointmentDetails');
        modalBody.innerHTML = `
            <h6 class="fw-bold">Appointment Details:</h6>
            <p class="mb-1"><strong>Date:</strong> ${date}</p>
            <p class="mb-1"><strong>Time:</strong> ${time}</p>
            <p class="mb-1"><strong>Client:</strong> ${clientName}</p>
            <p class="mb-3"><strong>Service:</strong> ${serviceName}</p>
        `;
        
        const modal = new bootstrap.Modal(document.getElementById('cancelModal'));
        modal.show();
    }

    function showDeleteModal(id, date, time, clientName, serviceName) {
        currentAppointmentId = id;
        const modalBody = document.getElementById('deleteAppointmentDetails');
        modalBody.innerHTML = `
            <h6 class="fw-bold">Appointment Details:</h6>
            <p class="mb-1"><strong>Date:</strong> ${date}</p>
            <p class="mb-1"><strong>Time:</strong> ${time}</p>
            <p class="mb-1"><strong>Client:</strong> ${clientName}</p>
            <p class="mb-3"><strong>Service:</strong> ${serviceName}</p>
        `;
        
        const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
        modal.show();
    }

    function confirmCancel() {
        const reason = document.getElementById('cancellationReason').value;
        document.getElementById('actionId').value = currentAppointmentId;
        document.getElementById('actionType').value = 'cancel';
        document.getElementById('cancellationReasonInput').value = reason;
        document.getElementById('actionForm').action = '/Appointment/Cancel';
        document.getElementById('actionForm').submit();
    }

    function confirmDelete() {
        document.getElementById('actionId').value = currentAppointmentId;
        document.getElementById('actionType').value = 'delete';
        document.getElementById('actionForm').action = '/Appointment/Delete';
        document.getElementById('actionForm').submit();
    }

         function completeAppointment(id) {
         currentAppointmentId = id;
         
         // Get appointment details from the table row
         const row = event.target.closest('tr');
         const dateTime = row.cells[0].textContent;
         const clientName = row.cells[1].textContent.trim();
         const serviceName = row.cells[2].textContent.trim();
         
         const modalBody = document.getElementById('completeAppointmentDetails');
         modalBody.innerHTML = `
             <h6 class="fw-bold mb-3">Appointment Details:</h6>
             <div class="row">
                 <div class="col-md-6">
                     <p class="mb-1"><strong>Date & Time:</strong></p>
                     <p class="text-muted">${dateTime}</p>
                 </div>
                 <div class="col-md-6">
                     <p class="mb-1"><strong>Client:</strong></p>
                     <p class="text-muted">${clientName}</p>
                 </div>
             </div>
             <div class="row">
                 <div class="col-md-6">
                     <p class="mb-1"><strong>Service:</strong></p>
                     <p class="text-muted">${serviceName}</p>
                 </div>
             </div>
         `;
         
         // Clear previous form data
         clearProductForm();
         
                  const modal = new bootstrap.Modal(document.getElementById('completeAppointmentModal'));
         modal.show();
     }
     
     function clearProductForm() {
         // Clear all product rows except the first one
         const container = document.getElementById('productSelectionContainer');
         const rows = container.querySelectorAll('.product-row');
         
         for (let i = 1; i < rows.length; i++) {
             rows[i].remove();
         }
         
         // Clear the first row
         const firstRow = rows[0];
         firstRow.querySelector('.product-select').value = '';
         firstRow.querySelector('.quantity-input').value = '';
         firstRow.querySelector('.remove-product').style.display = 'none';
         
         // Clear completion notes
         document.getElementById('CompletionNotes').value = '';
     }
     
     function addProductRow() {
         const container = document.getElementById('productSelectionContainer');
         const newRow = document.createElement('div');
         newRow.className = 'product-row row mb-2';
         
         // Clone the first row structure
         const firstRow = container.querySelector('.product-row');
         const productSelect = firstRow.querySelector('.product-select').cloneNode(true);
         const quantityInput = firstRow.querySelector('.quantity-input').cloneNode(true);
         
         // Clear the cloned values
         productSelect.value = '';
         quantityInput.value = '';
         
         newRow.innerHTML = `
             <div class="col-md-6">
                 ${productSelect.outerHTML.replace('name="ProductIds[]"', 'name="ProductIds[]"')}
             </div>
             <div class="col-md-4">
                 ${quantityInput.outerHTML.replace('name="Quantities[]"', 'name="Quantities[]"')}
             </div>
             <div class="col-md-2">
                 <button type="button" class="btn btn-outline-danger btn-sm remove-product" onclick="removeProductRow(this)">
                     <i class="bi bi-trash"></i>
                 </button>
             </div>
         `;
         
         container.appendChild(newRow);
         
         // Show remove button on first row if we have multiple rows
         const rows = container.querySelectorAll('.product-row');
         if (rows.length > 1) {
             rows[0].querySelector('.remove-product').style.display = 'block';
         }
     }
     
     function removeProductRow(button) {
         const row = button.closest('.product-row');
         row.remove();
         
         // Hide remove button on first row if only one row remains
         const container = document.getElementById('productSelectionContainer');
         const rows = container.querySelectorAll('.product-row');
         if (rows.length === 1) {
             rows[0].querySelector('.remove-product').style.display = 'none';
         }
     }
     
     function confirmComplete() {
         // Validate that at least one product is selected
         const productSelects = document.querySelectorAll('.product-select');
         const quantityInputs = document.querySelectorAll('.quantity-input');
         let hasValidProduct = false;
         
         for (let i = 0; i < productSelects.length; i++) {
             if (productSelects[i].value && quantityInputs[i].value && quantityInputs[i].value > 0) {
                 hasValidProduct = true;
                 break;
             }
         }
         
         if (!hasValidProduct) {
             alert('Please select at least one product and specify the quantity used.');
             return false;
         }
         
         // Set the appointment ID in the form
         document.getElementById('completeAppointmentId').value = currentAppointmentId;
         
         // Submit the form
         document.getElementById('completeAppointmentForm').submit();
     }
     
     function getStatusBadgeColor(status) {
        switch (status.toLowerCase()) {
            case 'scheduled': return 'primary';
            case 'confirmed': return 'success';
            case 'completed': return 'success';
            case 'cancelled': return 'danger';
            case 'no-show': return 'warning';
            default: return 'secondary';
        }
    }

    // Staff assignment functionality
    function showAssignStaffModal(appointmentId, clientName, date, time, serviceName) {
        currentAppointmentId = appointmentId;
        const modalBody = document.getElementById('assignStaffAppointmentDetails');
        modalBody.innerHTML = `
            <h6 class="fw-bold">Appointment Details:</h6>
            <p class="mb-1"><strong>Client:</strong> ${clientName}</p>
            <p class="mb-1"><strong>Date:</strong> ${date}</p>
            <p class="mb-1"><strong>Time:</strong> ${time}</p>
            <p class="mb-3"><strong>Service:</strong> ${serviceName}</p>
        `;
        
        // Populate staff dropdown
        loadStaffOptions();
        
        const modal = new bootstrap.Modal(document.getElementById('assignStaffModal'));
        modal.show();
    }

    function loadStaffOptions() {
        const staffSelect = document.getElementById('staffAssignmentSelect');
        
        // Clear existing options except the first one
        while (staffSelect.children.length > 1) {
            staffSelect.removeChild(staffSelect.lastChild);
        }
        
        // For demonstration, you would typically load this from the server
        // For now, we'll make an AJAX call to get staff data
        fetch('/Staff/GetActiveStaff')
            .then(response => response.json())
            .then(staffData => {
                staffData.forEach(function(staff) {
                    const option = document.createElement('option');
                    option.value = staff.staffId;
                    option.textContent = staff.fullName + ' - ' + staff.expertise;
                    staffSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading staff:', error);
                // Fallback - you could populate with a default list here
            });
    }

    function confirmStaffAssignment() {
        const staffId = document.getElementById('staffAssignmentSelect').value;
        
        if (!staffId) {
            alert('Please select a staff member.');
            return;
        }
        
        // Submit the staff assignment
        fetch('/Appointment/AssignStaff', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                appointmentId: currentAppointmentId,
                staffId: parseInt(staffId)
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload(); // Refresh the page to show the updated assignment
            } else {
                alert('Error assigning staff: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while assigning staff.');
        });
    }
</script>
