@model CAPS.Models.Transaction

@{
    ViewData["Title"] = Model.TransactionId == 0 ? "New Transaction" : "Edit Transaction";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var isEdit = Model.TransactionId != 0;
}

<div class="new-transaction-container">
    <!-- Back Button -->
    <div class="back-button-container">
        <a asp-action="Index" class="back-button">
            <i class="bi bi-arrow-left"></i> Back
        </a>
    </div>

    <!-- Main Form Panel -->
    <div class="form-panel">
        <!-- Header Section -->
        <div class="form-header">
            <h1 class="form-title">New Transaction</h1>
        </div>

        <!-- Form Content -->
        <div class="form-content">
            <form asp-action="UpSert" method="post" id="transactionForm">
                <input type="hidden" asp-for="TransactionId" />
                <input type="hidden" asp-for="DateCreated" />
                <input type="hidden" asp-for="IsActive" value="true" />
                <input type="hidden" asp-for="ClientId" />
                <input type="hidden" asp-for="StaffId" value="1" />
                <input type="hidden" asp-for="Status" value="Completed" />

                <div class="form-sections">
                    <!-- Client Information Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h3 class="section-title">Client Information</h3>
                        </div>
                        <div class="section-content">
                            @if (Model.ClientId > 0)
                            {
                                var client = ViewBag.Clients as List<CAPS.Models.Client>;
                                var selectedClient = client?.FirstOrDefault(c => c.ClientId == Model.ClientId);
                                if (selectedClient != null)
                                {
                                    <div class="client-display">
                                        <div class="client-name">@selectedClient.FirstName @selectedClient.LastName</div>
                                        <div class="client-details">
                                            <div>Phone: @selectedClient.PhoneNumber</div>
                                            <div>Gender: @selectedClient.Gender</div>
                                            <div>Registered: @selectedClient.DateRegistered.ToString("yyyy-MM-dd")</div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="empty-field">Select Client</div>
                            }
                        </div>
                    </div>

                    <!-- Availed Services Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h3 class="section-title">Availed Services</h3>
                        </div>
                        <div class="section-content">
                            @if (ViewBag.AvailedServices != null)
                            {
                                <div class="availed-services-display">
                                    @foreach (CAPS.Controllers.AvailedServiceViewModel availedService in ViewBag.AvailedServices)
                                    {
                                        <div class="service-item @(availedService.Service.ServiceId == Model.ServiceId ? "selected" : "")">
                                            <div class="service-name">@availedService.Service.Name</div>
                                            <div class="service-details">@availedService.TotalDuration min - $@availedService.Service.Price</div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <select asp-for="ServiceId" class="form-control" required id="serviceSelect">
                                    <option value="">Select Service</option>
                                    @foreach (var service in ViewBag.Services)
                                    {
                                        <option value="@service.ServiceId"
                                                data-price="@service.Price"
                                                data-duration="@service.Duration">
                                            @service.Name - $@service.Price (@service.Duration min)
                                        </option>
                                    }
                                </select>
                            }

                            @if (ViewBag.AvailedServices != null)
                            {
                                <input type="hidden" asp-for="ServiceId" id="hiddenServiceId" />
                            }
                        </div>
                    </div>
                </div>

                <!-- Product Used Section -->
                <div class="form-section full-width">
                    <div class="section-header">
                        <h3 class="section-title">Product Used</h3>
                        <button type="button" class="add-product-btn" id="addProductBtn">
                            Add Product
                        </button>
                    </div>
                    <div class="section-content">
                        <div id="productsUsedList">
                            @if (ViewBag.ProductsUsed != null && ((List<CAPS.Models.ProductUsed>)ViewBag.ProductsUsed).Any())
                            {
                                @foreach (var productUsed in ViewBag.ProductsUsed)
                                {
                                    <div class="product-row" data-product-used-id="@productUsed.ProductUsedId">
                                        <div class="product-field">
                                            <label>Product</label>
                                            <select class="form-control product-select" name="productUsed[@((ViewBag.ProductsUsed as List<CAPS.Models.ProductUsed>).IndexOf(productUsed))].ProductId" required>
                                                <option value="">Select Product</option>
                                                @foreach (var product in ViewBag.Products)
                                                {
                                                    <option value="@product.ProductId" @@(product.ProductId= =productUsed.ProductId ? "selected" : "" )>
                                                        @product.Name - @product.Category
                                                    </option>
                                                }
                                            </select>
                                        </div>
                                        <div class="quantity-field">
                                            <label>Quantity</label>
                                            <input type="number" class="form-control quantity-input" name="productUsed[@((ViewBag.ProductsUsed as List<CAPS.Models.ProductUsed>).IndexOf(productUsed))].Quantity"
                                                   value="@productUsed.Quantity" min="1" required />
                                        </div>
                                        <div class="remove-field">
                                            <button type="button" class="remove-btn remove-product">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <div id="noProductsMessage" class="no-products-message">
                            No products added yet. Click "Add Product" to start adding products.
                        </div>
                    </div>
                </div>

                <!-- Payment Information Section -->
                <div class="form-section full-width">
                    <div class="section-header">
                        <h3 class="section-title">Payment Information</h3>
                    </div>
                    <div class="section-content">
                        <div class="payment-fields">
                            <div class="payment-field">
                                <label>Amount to pay</label>
                                <input asp-for="Amount" type="number" step="0.01" min="0" class="form-control" required id="amountToPay" />
                                <span asp-validation-for="Amount" class="validation-message"></span>
                            </div>
                            <div class="payment-field">
                                <label>Tendered Amount</label>
                                <input type="number" step="0.01" min="0" class="form-control" id="tenderedAmount" name="tenderedAmount" />
                            </div>
                            <div class="payment-field">
                                <label>Change</label>
                                <input type="text" class="form-control" id="changeAmount" readonly />
                            </div>
                        </div>

                        @if (ViewBag.IsEligibleForDiscount == true)
                        {
                            <div class="discount-section" id="discountSection">
                                <div class="discount-header">
                                    <h4>Loyalty Discount (5+ Transactions)</h4>
                                </div>
                                <div class="discount-content">
                                    <div class="discount-field">
                                        <label>Discount Percentage (%)</label>
                                        <input type="number" step="0.01" min="0" max="100" class="form-control" id="discountPercentage" name="discountPercentage" placeholder="0.00" />
                                    </div>
                                    <div class="discount-field">
                                        <label>Final Amount After Discount</label>
                                        <input type="text" class="form-control" id="finalAmount" readonly />
                                    </div>
                                    <div class="discount-field">
                                        <label>Total Discount Applied</label>
                                        <input type="text" class="form-control" id="totalDiscount" readonly />
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="additional-fields">
                            <div class="additional-field">
                                <label asp-for="PaymentMethod">Payment Method</label>
                                <select asp-for="PaymentMethod" class="form-control">
                                    <option value="Cash">Cash</option>
                                    <option value="Credit Card">Credit Card</option>
                                    <option value="Debit Card">Debit Card</option>
                                    <option value="Online Payment">Online Payment</option>
                                </select>
                            </div>
                            <div class="additional-field">
                                <label asp-for="Notes">Notes</label>
                                <textarea asp-for="Notes" class="form-control" rows="2" placeholder="Additional notes..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="form-actions">
                    <button type="button" class="complete-btn" id="completePayment">
                        Complete
                    </button>
                    <a asp-action="Index" class="cancel-btn">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Auto-fill service price when service is selected from dropdown
            $('#serviceSelect').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var price = selectedOption.data('price');

                if (price) {
                    $('#amountToPay').val(price);
                    calculateChange();
                }
            });

            // Calculate change when tendered amount changes
            $('#tenderedAmount').on('input', function() {
                calculateChange();
            });

            // Auto-fill amount if service is pre-selected
            @if (Model.ServiceId > 0)
            {
                    <text>
                    var preSelectedPrice = @Model.Amount;
                    $('#amountToPay').val(preSelectedPrice);
                    calculateChange();
                    </text>
            }

            // Calculate change function
            function calculateChange() {
                var amountToPay = parseFloat($('#amountToPay').val()) || 0;
                var tenderedAmount = parseFloat($('#tenderedAmount').val()) || 0;
                var finalAmount = calculateFinalAmount();
                var change = tenderedAmount - finalAmount;

                $('#changeAmount').val(change.toFixed(2));

                // Enable/disable Complete Payment button
                if (tenderedAmount >= finalAmount && tenderedAmount > 0) {
                    $('#completePayment').prop('disabled', false);
                } else {
                    $('#completePayment').prop('disabled', true);
                }
            }

            // Calculate final amount after discount
            function calculateFinalAmount() {
                var originalAmount = parseFloat($('#amountToPay').val()) || 0;
                var discountPercentage = parseFloat($('#discountPercentage').val()) || 0;

                var totalDiscount = 0;

                if (discountPercentage > 0) {
                    totalDiscount = originalAmount * (discountPercentage / 100);
                }

                var finalAmount = originalAmount - totalDiscount;
                if (finalAmount < 0) finalAmount = 0;

                $('#finalAmount').val(finalAmount.toFixed(2));
                $('#totalDiscount').val(totalDiscount.toFixed(2));

                return finalAmount;
            }

            // Discount calculation event handler
            $('#discountPercentage').on('input', function() {
                calculateFinalAmount();
                calculateChange();
            });

            // Complete Payment button click
            $('#completePayment').on('click', function() {
                var amountToPay = parseFloat($('#amountToPay').val()) || 0;
                var tenderedAmount = parseFloat($('#tenderedAmount').val()) || 0;
                var finalAmount = calculateFinalAmount();
                var serviceId = $('#serviceSelect').val() || $('#hiddenServiceId').val();
                var hasAvailedServices = @(ViewBag.AvailedServices != null ? "true" : "false");

                // Validation - only check service if no availed services are pre-selected
                if (!hasAvailedServices && !serviceId) {
                    alert('Please select a service.');
                    return;
                }

                if (amountToPay <= 0) {
                    alert('Please enter a valid amount to pay.');
                    return;
                }

                if (tenderedAmount < finalAmount) {
                    alert('Tendered amount must be greater than or equal to final amount after discount.');
                    return;
                }

                // Show loading state
                $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Processing...');

                // Submit the form
                $('#transactionForm').submit();
            });

            // Initialize change calculation
            calculateChange();

            // Product management functionality
            var productIndex = 0;
            var products = @Html.Raw(Json.Serialize(ViewBag.Products));

            // Add product button click
            $('#addProductBtn').on('click', function() {
                addProductRow();
            });

            // Remove product button click (using event delegation)
            $(document).on('click', '.remove-product', function() {
                $(this).closest('.product-item').remove();
                updateProductIndexes();
                toggleNoProductsMessage();
            });

            // Product select change (using event delegation)
            $(document).on('change', '.product-select', function() {
                var productId = $(this).val();
                var row = $(this).closest('.product-item');

                if (productId) {
                    // Get product info via AJAX
                    $.get('@Url.Action("GetProductInfo", "Transaction")', { productId: productId }, function(data) {
                        if (data.isActive && data.stockQuantity > 0) {
                            row.find('.quantity-input').attr('max', data.stockQuantity);
                            row.find('.quantity-input').val('1');
                        } else {
                            alert('Product is not available or out of stock.');
                            row.find('.product-select').val('');
                        }
                    });
                }
            });

            function addProductRow() {
                var productHtml = `
                    <div class="product-row">
                        <div class="product-field">
                            <label>Product</label>
                            <select class="form-control product-select" name="productUsed[${productIndex}].ProductId" required>
                                <option value="">Select Product</option>
                                ${products.map(p => `<option value="${p.productId}">${p.name} - ${p.category}</option>`).join('')}
                            </select>
                        </div>
                        <div class="quantity-field">
                            <label>Quantity</label>
                            <input type="number" class="form-control quantity-input" name="productUsed[${productIndex}].Quantity"
                                   value="1" min="1" required />
                        </div>
                        <div class="remove-field">
                            <button type="button" class="remove-btn remove-product">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                `;

                $('#productsUsedList').append(productHtml);
                productIndex++;
                toggleNoProductsMessage();
            }


            function updateProductIndexes() {
                $('#productsUsedList .product-item').each(function(index) {
                    $(this).find('select, input').each(function() {
                        var name = $(this).attr('name');
                        if (name) {
                            $(this).attr('name', name.replace(/\[\d+\]/, '[' + index + ']'));
                        }
                    });
                });
            }

            function toggleNoProductsMessage() {
                var productCount = $('#productsUsedList .product-item').length;
                if (productCount === 0) {
                    $('#noProductsMessage').show();
                } else {
                    $('#noProductsMessage').hide();
                }
            }

            // Initialize product index based on existing products
            @if (ViewBag.ProductsUsed != null && ((List<CAPS.Models.ProductUsed>)ViewBag.ProductsUsed).Any())
            {
                    <text>productIndex = @((ViewBag.ProductsUsed as List<CAPS.Models.ProductUsed>).Count);</text>
            }

            // Initialize no products message visibility
            toggleNoProductsMessage();
        });
    </script>
}

<style>
    body {
        background-color: #ffffff;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .new-transaction-container {
        background-color: #ffffff;
        padding: 30px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        position: relative;
    }

    .back-button-container {
        position: absolute;
        top: 30px;
        left: 30px;
        z-index: 1000;
    }

    .back-button {
        background-color: #f8f9fa;
        border: 2px solid #137759;
        border-radius: 6px;
        padding: 8px 16px;
        color: #6c757d;
        text-decoration: none;
        font-size: 14px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        font-weight: 500;
        font-family: Arial, sans-serif;
    }

        .back-button:hover {
            background-color: #137759;
            color: #ffffff;
            text-decoration: none;
        }

    .form-panel {
        background-color: #e8f5e8;
        border: 2px solid #137759;
        border-radius: 8px;
        max-width: 800px;
        width: 100%;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 60px;
    }

    .form-header {
        background-color: #137759;
        padding: 20px;
        text-align: center;
    }

    .form-title {
        font-family: Arial, sans-serif;
        font-size: 24px;
        font-weight: bold;
        color: #ffffff;
        margin: 0;
        letter-spacing: 0.5px;
    }

    .form-content {
        padding: 30px;
        background-color: #e8f5e8;
    }

    .form-sections {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-section {
        background-color: #ffffff;
        border: 2px solid #137759;
        border-radius: 6px;
        overflow: hidden;
    }

        .form-section.full-width {
            grid-column: 1 / -1;
        }

    .section-header {
        background-color: #e8f5e8;
        padding: 15px 20px;
        border-bottom: 1px solid #137759;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-title {
        font-family: Arial, sans-serif;
        font-size: 18px;
        font-weight: bold;
        color: #137759;
        margin: 0;
    }

    .add-product-btn {
        background-color: #ffffff;
        border: 2px solid #137759;
        border-radius: 4px;
        padding: 8px 16px;
        color: #137759;
        font-weight: bold;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: Arial, sans-serif;
    }

        .add-product-btn:hover {
            background-color: #137759;
            color: #ffffff;
        }

    .section-content {
        padding: 20px;
        background-color: #ffffff;
    }

    .client-display {
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
    }

    .client-name {
        font-weight: bold;
        font-size: 16px;
        color: #137759;
        margin-bottom: 8px;
    }

    .client-details {
        font-size: 14px;
        color: #6c757d;
        line-height: 1.4;
    }

    .empty-field {
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        color: #6c757d;
        font-style: italic;
        text-align: center;
    }

    .availed-services-display {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .service-item {
        padding: 12px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
    }

        .service-item.selected {
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

    .service-name {
        font-weight: bold;
        font-size: 14px;
        color: #137759;
        margin-bottom: 4px;
    }

    .service-details {
        font-size: 12px;
        color: #6c757d;
    }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #137759;
        border-radius: 4px;
        background-color: #ffffff;
        font-size: 16px;
        color: #2d5016;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

        .form-control:focus {
            outline: none;
            border-color: #137759;
            box-shadow: 0 0 0 2px rgba(19, 119, 89, 0.2);
        }

        .form-control::placeholder {
            color: #6c757d;
            font-style: normal;
        }

    .product-row {
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: 15px;
        align-items: end;
        margin-bottom: 15px;
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
    }

    .product-field {
        display: flex;
        flex-direction: column;
    }

    .quantity-field {
        display: flex;
        flex-direction: column;
        min-width: 100px;
    }

    .remove-field {
        display: flex;
        align-items: end;
    }

    .product-field label,
    .quantity-field label {
        font-size: 14px;
        font-weight: bold;
        color: #137759;
        margin-bottom: 5px;
    }

    .remove-btn {
        width: 32px;
        height: 32px;
        background-color: #dc3545;
        border: none;
        border-radius: 50%;
        color: #ffffff;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        font-size: 16px;
    }

        .remove-btn:hover {
            background-color: #c82333;
        }

    .no-products-message {
        text-align: center;
        color: #6c757d;
        font-style: italic;
        padding: 20px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
    }

    .payment-fields {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .payment-field {
        display: flex;
        flex-direction: column;
    }

        .payment-field label {
            font-size: 14px;
            font-weight: bold;
            color: #137759;
            margin-bottom: 8px;
        }

    .discount-section {
        background-color: #fff3cd;
        border: 2px solid #ffc107;
        border-radius: 6px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .discount-header h4 {
        font-family: Arial, sans-serif;
        font-size: 16px;
        font-weight: bold;
        color: #856404;
        margin: 0 0 15px 0;
    }

    .discount-content {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 15px;
    }

    .discount-field {
        display: flex;
        flex-direction: column;
    }

        .discount-field label {
            font-size: 14px;
            font-weight: bold;
            color: #856404;
            margin-bottom: 5px;
        }

    .additional-fields {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .additional-field {
        display: flex;
        flex-direction: column;
    }

        .additional-field label {
            font-size: 14px;
            font-weight: bold;
            color: #137759;
            margin-bottom: 8px;
        }

    .validation-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 4px;
        font-weight: 500;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
        background-color: #fff5f5;
    }

    .form-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
    }

    .complete-btn,
    .cancel-btn {
        padding: 12px 24px;
        border: 2px solid #137759;
        border-radius: 6px;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: Arial, sans-serif;
        min-width: 120px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .complete-btn {
        background-color: #28a745;
        color: #ffffff;
        border-color: #28a745;
    }

        .complete-btn:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

    .cancel-btn {
        background-color: #ffffff;
        color: #137759;
        border-color: #137759;
    }

        .cancel-btn:hover {
            background-color: #137759;
            color: #ffffff;
            text-decoration: none;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .new-transaction-container {
            padding: 15px;
            margin-top: 10px;
        }

        .form-panel {
            max-width: 100%;
            margin-top: 40px;
        }

        .form-sections {
            grid-template-columns: 1fr;
        }

        .form-section.full-width {
            grid-column: 1;
        }

        .back-button {
            padding: 6px 12px;
            font-size: 12px;
        }

        .back-button-container {
            top: 15px;
            left: 15px;
        }

        .payment-fields {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .discount-content {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .additional-fields {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .product-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .form-actions {
            flex-direction: column;
            align-items: center;
        }

        .complete-btn,
        .cancel-btn {
            width: 100%;
            max-width: 200px;
        }
    }
</style>
