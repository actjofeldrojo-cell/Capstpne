@model IEnumerable<CAPS.Models.Transaction>

@{
    ViewData["Title"] = "Transactions";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <h2 class="text-primary">
                <i class="fas fa-receipt me-2"></i>Transactions
            </h2>
            <p class="text-muted">Manage all spa/salon transactions</p>
        </div>
        <div class="col-md-6 text-end">
            <a asp-action="UpSert" class="btn btn-primary btn-lg">
                <i class="fas fa-plus me-2"></i>New Transaction
            </a>
            <a asp-action="Report" class="btn btn-outline-secondary btn-lg ms-2">
                <i class="fas fa-chart-bar me-2"></i>Reports
            </a>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="searchTerm">Search</label>
                        <input type="text" id="searchTerm" class="form-control" placeholder="Client, Service, Receipt #...">
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="statusFilter">Status</label>
                        <select id="statusFilter" class="form-select">
                            <option value="">All Status</option>
                            <option value="Completed">Completed</option>
                            <option value="Pending">Pending</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Refunded">Refunded</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="paymentFilter">Payment Method</label>
                        <select id="paymentFilter" class="form-select">
                            <option value="">All Methods</option>
                            <option value="Cash">Cash</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Debit Card">Debit Card</option>
                            <option value="Online Payment">Online Payment</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="dateFrom">From Date</label>
                        <input type="date" id="dateFrom" class="form-control">
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="dateTo">To Date</label>
                        <input type="date" id="dateTo" class="form-control">
                    </div>
                </div>
                <div class="col-md-1 d-flex align-items-end">
                    <button id="clearFilters" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Transactions</h6>
                            <h3 id="totalTransactions">@Model.Count()</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-receipt fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Revenue</h6>
                            <h3 id="totalRevenue">$@Model.Sum(t => t.TotalAmount).ToString("N2")</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-dollar-sign fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Today's Transactions</h6>
                            <h3 id="todayTransactions">@Model.Count(t => t.TransactionDate.Date == DateTime.Today)</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-calendar-day fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Average Value</h6>
                            <h3 id="avgValue">$@(Model.Any() ? Model.Average(t => t.TotalAmount).ToString("N2") : "0.00")</h3>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="transactionsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Date</th>
                            <th>Receipt #</th>
                            <th>Client</th>
                            <th>Service</th>
                            <th>Staff</th>
                            <th>Amount</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model)
                        {
                            <tr data-transaction-id="@transaction.TransactionId">
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-bold">@transaction.TransactionDate.ToString("MMM dd, yyyy")</span>
                                        <small class="text-muted">@transaction.TransactionDate.ToString("HH:mm")</small>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@transaction.ReceiptNumber</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                                            @(transaction.Client?.FirstName?.Substring(0, 1) ?? "?")
                                        </div>
                                        <div>
                                        <div class="fw-bold">@(transaction.Client?.FirstName + " " + transaction.Client?.LastName)</div>
                                            <small class="text-muted">@transaction.Client?.PhoneNumber></small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-bold">@transaction.Service?.Name</span>
                                        <small class="text-muted">@transaction.Service?.Duration min</small>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-sm bg-success text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                                            @(transaction.Staff?.FullName?.Substring(0, 1) ?? "?")
                                        </div>
                                        <span>@(transaction.Staff?.FullName)</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-bold text-success">$@transaction.TotalAmount.ToString("N2")</span>
                                        @if (transaction.DiscountAmount > 0)
                                        {
                                            <small class="text-danger">-$@transaction.DiscountAmount.ToString("N2")</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-info">@transaction.PaymentMethod</span>
                                </td>
                                <td>
                                    @{
                                        var statusClass = transaction.Status switch
                                        {
                                            "Completed" => "bg-success",
                                            "Pending" => "bg-warning",
                                            "Cancelled" => "bg-danger",
                                            "Refunded" => "bg-secondary",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusClass">@transaction.Status</span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@transaction.TransactionId" 
                                           class="btn btn-sm btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-action="UpSert" asp-route-id="@transaction.TransactionId" 
                                           class="btn btn-sm btn-outline-warning" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Receipt" asp-route-id="@transaction.TransactionId" 
                                           class="btn btn-sm btn-outline-info" title="Print Receipt">
                                            <i class="fas fa-print"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                onclick="deleteTransaction(@transaction.TransactionId)" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this transaction? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            var table = $('#transactionsTable').DataTable({
                order: [[0, 'desc']], // Sort by date descending
                pageLength: 25,
                responsive: true,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });

            // Search functionality
            $('#searchTerm').on('keyup', function() {
                table.search(this.value).draw();
            });

            // Status filter
            $('#statusFilter').on('change', function() {
                var status = $(this).val();
                if (status) {
                    table.column(7).search(status).draw();
                } else {
                    table.column(7).search('').draw();
                }
            });

            // Payment method filter
            $('#paymentFilter').on('change', function() {
                var payment = $(this).val();
                if (payment) {
                    table.column(6).search(payment).draw();
                } else {
                    table.column(6).search('').draw();
                }
            });

            // Date range filter
            function filterByDate() {
                var fromDate = $('#dateFrom').val();
                var toDate = $('#dateTo').val();
                
                if (fromDate || toDate) {
                    $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                        var transactionDate = new Date(data[0]); // Date column
                        var from = fromDate ? new Date(fromDate) : null;
                        var to = toDate ? new Date(toDate) : null;
                        
                        if (from && to) {
                            return transactionDate >= from && transactionDate <= to;
                        } else if (from) {
                            return transactionDate >= from;
                        } else if (to) {
                            return transactionDate <= to;
                        }
                        return true;
                    });
                }
                table.draw();
            }

            $('#dateFrom, #dateTo').on('change', filterByDate);

            // Clear filters
            $('#clearFilters').on('click', function() {
                $('#searchTerm').val('');
                $('#statusFilter').val('');
                $('#paymentFilter').val('');
                $('#dateFrom').val('');
                $('#dateTo').val('');
                
                // Clear DataTable search and filters
                table.search('').columns().search('').draw();
                
                // Remove custom date filter
                $.fn.dataTable.ext.search.pop();
                table.draw();
            });

            // Update summary cards when filtering
            table.on('search.dt', function() {
                updateSummaryCards();
            });

            function updateSummaryCards() {
                var visibleRows = table.rows({search: 'applied'}).data();
                var totalAmount = 0;
                var todayAmount = 0;
                var today = new Date().toDateString();
                
                visibleRows.each(function(value, index) {
                    var amount = parseFloat(value[5].replace(/[^0-9.-]+/g, ''));
                    totalAmount += amount;
                    
                    var rowDate = new Date(value[0]).toDateString();
                    if (rowDate === today) {
                        todayAmount += amount;
                    }
                });
                
                $('#totalTransactions').text(visibleRows.count());
                $('#totalRevenue').text('$' + totalAmount.toFixed(2));
                $('#avgValue').text(visibleRows.count() > 0 ? '$' + (totalAmount / visibleRows.count()).toFixed(2) : '$0.00');
            }
        });

        // Delete transaction function
        function deleteTransaction(id) {
            $('#deleteModal').modal('show');
            $('#confirmDelete').off('click').on('click', function() {
                $.post('@Url.Action("DeleteConfirmed", "Transaction")', { id: id })
                    .done(function() {
                        $('#deleteModal').modal('hide');
                        location.reload();
                    })
                    .fail(function() {
                        alert('Error deleting transaction. Please try again.');
                    });
            });
        }

        // Export functions
        function exportToCSV() {
            var table = $('#transactionsTable').DataTable();
            var data = table.rows({search: 'applied'}).data();
            var csv = 'Date,Receipt,Client,Service,Staff,Amount,Payment,Status\n';
            
            data.each(function(value, index) {
                csv += '"' + value[0] + '","' + value[1] + '","' + value[2] + '","' + 
                       value[3] + '","' + value[4] + '","' + value[5] + '","' + 
                       value[6] + '","' + value[7] + '"\n';
            });
            
            var blob = new Blob([csv], { type: 'text/csv' });
            var url = window.URL.createObjectURL(blob);
            var a = document.createElement('a');
            a.href = url;
            a.download = 'transactions.csv';
            a.click();
        }

        function exportToPDF() {
            // Implementation for PDF export
            alert('PDF export functionality would be implemented here');
        }
    </script>
}

<style>
    .avatar-sm {
        width: 32px;
        height: 32px;
        font-size: 14px;
        font-weight: bold;
    }
    
    .btn-group .btn {
        margin-right: 2px;
    }
    
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }
    
    .table th {
        border-top: none;
        font-weight: 600;
    }
    
    .badge {
        font-size: 0.75em;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .summary-card {
        transition: transform 0.2s;
    }
    
    .summary-card:hover {
        transform: translateY(-2px);
    }
</style>
