@model IEnumerable<CAPS.Models.Client>

@{
    ViewBag.Title = "Clients";
    ViewData["Title"] = "Clients";
}

<div class="clients-container">
    <!-- Page Title Banner -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-title-container">
                <h1 class="page-title">CLIENTS</h1>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Register New Client Button -->
    <div class="row mb-4">
        <div class="col-12">
            <a asp-action="UpSert" class="register-client-btn">
                <i class="bi bi-plus-lg"></i> Register new client
            </a>
        </div>
    </div>

    <!-- Client List Section -->
    <div class="client-list-container">
        <div class="section-header">
            <h2 class="section-title">Ready to be served</h2>
        </div>
        
        <div class="client-table-container">
            <div class="table-header">
                <div class="table-header-row">
                    <div class="table-header-cell">Name</div>
                    <div class="table-header-cell">Gender</div>
                    <div class="table-header-cell">Phone</div>
                    <div class="table-header-cell">Registered On</div>
                    <div class="table-header-cell">Availed Services</div>
                    <div class="table-header-cell">Status</div>
                    <div class="table-header-cell">Actions</div>
                </div>
            </div>
            
            <div class="table-body">
                @if (Model != null && Model.Any())
                {
                    @foreach (var client in Model)
                    {
                        <div class="table-row">
                            <div class="table-cell">
                                <div class="client-name">@client.FirstName @client.LastName</div>
                            </div>
                            <div class="table-cell">
                                <div class="client-gender">@client.Gender</div>
                            </div>
                            <div class="table-cell">
                                <div class="client-phone">@client.PhoneNumber</div>
                            </div>
                            <div class="table-cell">
                                <div class="registered-date">@client.DateRegistered.ToString("yyyy-MM-dd")</div>
                            </div>
                            <div class="table-cell">
                                @if (client.Appointments != null && client.Appointments.Any(a => a.IsActive && a.Duration > 0))
                                {
                                    var activeServices = client.Appointments
                                        .Where(a => a.IsActive && a.Duration > 0)
                                        .GroupBy(a => a.ServiceId)
                                        .Select(g => new { 
                                            Service = g.First().Service, 
                                            TotalDuration = g.Sum(a => a.Duration) 
                                        })
                                        .ToList();
                                    
                                    <div class="services-list">
                                        @foreach (var service in activeServices.Take(2))
                                        {
                                            <div class="service-item">
                                                <span class="service-name">@(service.Service?.Name ?? "Unknown")</span>
                                            </div>
                                        }
                                        @if (activeServices.Count > 2)
                                        {
                                            <div class="service-item">
                                                <span class="service-more">+@(activeServices.Count - 2) more</span>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="no-services">No services availed</div>
                                }
                            </div>
                            <div class="table-cell">
                                @{
                                    var completedClientIds = Context.Session.GetString("CompletedClients")?.Split(',').Select(int.Parse).ToList() ?? new List<int>();
                                    var isCompleted = completedClientIds.Contains(client.ClientId);
                                }
                                @if (isCompleted)
                                {
                                    <div class="status-badge completed">Completed</div>
                                }
                                else if (client.IsActive)
                                {
                                    <div class="status-badge active">Active</div>
                                }
                                else
                                {
                                    <div class="status-badge inactive">Inactive</div>
                                }
                            </div>
                            <div class="table-cell">
                                <div class="action-buttons">
                                    @if (!isCompleted)
                                    {
                                        @Html.ActionLink("", "ServiceExtend", new { id = client.ClientId }, new { @class = "action-btn extend-btn", title = "Service Extend" })
                                        <button type="button" class="action-btn service-btn" title="In-Service" 
                                                onclick="setClientForInService(@client.ClientId, '@client.FirstName', '@client.LastName')"
                                                data-bs-toggle="modal" data-bs-target="#inServiceModal">
                                            <i class="bi bi-person-check"></i>
                                        </button>
                                        @Html.ActionLink("", "UpSert", "Transaction", new { clientId = client.ClientId }, new { @class = "action-btn payment-btn", title = "For Payment" })
                                        @using (Html.BeginForm("Cancel", "Client", new { id = client.ClientId }, FormMethod.Post, true, new { @class = "d-inline" }))
                                        {
                                            <button type="submit" class="action-btn delete-btn" title="Cancel Client" 
                                                    onclick="return confirm('Are you sure you want to cancel this client?')">
                                                <i class="bi bi-x-lg"></i>
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        @Html.ActionLink("", "UpSert", "Transaction", new { clientId = client.ClientId }, new { @class = "action-btn payment-btn", title = "For Payment" })
                                        <span class="completed-text">Service Completed</span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="bi bi-people"></i>
                        </div>
                        <div class="empty-message">No clients found</div>
                        <div class="empty-description">Start by registering your first client</div>
                        <a asp-action="UpSert" class="empty-action-btn">
                            <i class="bi bi-plus-lg"></i> Register First Client
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- In-Service Modal -->
<div class="modal fade" id="inServiceModal" tabindex="-1" aria-labelledby="inServiceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg in-service-modal">
        <div class="modal-content in-service-content">
            <div class="modal-header in-service-header">
                <h5 class="modal-title in-service-title" id="inServiceModalLabel">
                    Put Client In-Service
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body in-service-body">
                <form id="inServiceForm">
                    <input type="hidden" id="clientId" name="clientId" />
                    
                    <div class="client-info-display">
                        <span class="client-label">Client Name:</span>
                        <span id="clientName" class="client-name"></span>
                    </div>

                    <div class="form-grid">
                        <div class="form-section services-section">
                            <label for="selectedServices" class="section-label">Select Services</label>
                            <div class="services-container">
                                <select id="selectedServices" name="selectedServices" class="services-select" multiple size="6" required>
                                    <!-- Services will be loaded via AJAX -->
                                </select>
                            </div>
                        </div>

                        <div class="form-section room-section">
                            <label for="selectedRoom" class="section-label">Select Room</label>
                            <select id="selectedRoom" name="selectedRoom" class="dropdown-select" required>
                                <option value="">-Select Room-</option>
                                <!-- Rooms will be loaded via AJAX -->
                            </select>
                        </div>

                        <div class="form-section staff-section">
                            <label for="selectedStaff" class="section-label">Select Staff</label>
                            <select id="selectedStaff" name="selectedStaff" class="dropdown-select" required>
                                <option value="">-Select Staff-</option>
                                <!-- Staff will be loaded via AJAX -->
                            </select>
                        </div>

                        <div class="form-section notes-section">
                            <label for="serviceNotes" class="section-label">Service Note:</label>
                            <div class="notes-container">
                                <textarea id="serviceNotes" name="serviceNotes" class="notes-textarea" rows="4" placeholder="Add any special notes for this service session"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="info-note">
                        <strong>Note:</strong> This will mark the client as currently being served and assign them to the selected room and selected staff.
                    </div>
                </form>
            </div>
            <div class="modal-footer in-service-footer">
                <button type="button" class="cancel-btn" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="save-btn" onclick="submitInService()">Save</button>
            </div>
        </div>
    </div>
</div>

<style>
    .clients-container {
        padding: 30px;
        background-color: #ffffff;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .page-title-container {
        background-color: #e8f5e8;
        border: 2px solid #2d5016;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        margin-bottom: 30px;
    }

    .page-title {
        font-family: 'Georgia', 'Times New Roman', serif;
        font-size: 32px;
        font-weight: bold;
        color: #2d5016;
        margin: 0;
        letter-spacing: 2px;
    }

    .register-client-btn {
        background-color: #ffffff;
        border: 2px solid #2d5016;
        border-radius: 8px;
        padding: 12px 24px;
        color: #2d5016;
        text-decoration: none;
        font-weight: bold;
        font-size: 16px;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .register-client-btn:hover {
        background-color: #2d5016;
        color: #ffffff;
        text-decoration: none;
    }

    .client-list-container {
        background-color: #ffffff;
        border: 2px solid #e8f5e8;
        border-radius: 8px;
        margin-top: 30px;
    }

    .section-header {
        background-color: #e8f5e8;
        border-bottom: 2px solid #2d5016;
        padding: 20px;
        text-align: center;
    }

    .section-title {
        font-family: 'Georgia', 'Times New Roman', serif;
        font-size: 24px;
        font-weight: bold;
        color: #2d5016;
        margin: 0;
    }

    .client-table-container {
        background-color: #ffffff;
    }

    .table-header {
        background-color: #f8f9fa;
        border-bottom: 2px solid #e8f5e8;
    }

    .table-header-row {
        display: grid;
        grid-template-columns: 1.5fr 1fr 1.5fr 1.5fr 2fr 1fr 1.5fr;
        gap: 1px;
        background-color: #2d5016;
    }

    .table-header-cell {
        background-color: #f8f9fa;
        padding: 15px 10px;
        color: #2d5016;
        font-weight: bold;
        font-size: 16px;
        text-align: center;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .table-body {
        min-height: 200px;
    }

    .table-row {
        display: grid;
        grid-template-columns: 1.5fr 1fr 1.5fr 1.5fr 2fr 1fr 1.5fr;
        gap: 1px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e8f5e8;
    }

    .table-row:hover {
        background-color: #f0f8f0;
    }

    .table-cell {
        background-color: #ffffff;
        padding: 15px 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #2d5016;
        font-size: 14px;
    }

    .client-name {
        font-weight: bold;
        color: #2d5016;
    }

    .client-gender {
        color: #2d5016;
    }

    .client-phone {
        color: #2d5016;
        font-family: monospace;
    }

    .registered-date {
        color: #2d5016;
    }

    .services-list {
        text-align: left;
    }

    .service-item {
        margin-bottom: 4px;
    }

    .service-name {
        background-color: #e8f5e8;
        border: 1px solid #2d5016;
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 11px;
        color: #2d5016;
        display: inline-block;
        margin-bottom: 2px;
    }

    .service-more {
        background-color: #fff3cd;
        border: 1px solid #ffc107;
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 11px;
        color: #856404;
        display: inline-block;
    }

    .no-services {
        color: #999;
        font-style: italic;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        text-align: center;
    }

    .status-badge.active {
        background-color: #d4edda;
        border: 1px solid #28a745;
        color: #155724;
    }

    .status-badge.completed {
        background-color: #d1ecf1;
        border: 1px solid #17a2b8;
        color: #0c5460;
    }

    .status-badge.inactive {
        background-color: #f8d7da;
        border: 1px solid #dc3545;
        color: #721c24;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
        justify-content: center;
        align-items: center;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        font-size: 14px;
    }

    .extend-btn {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #28a745;
    }

    .extend-btn::before {
        content: "⏱";
        font-size: 14px;
    }

    .service-btn {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffc107;
    }

    .payment-btn {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #17a2b8;
    }

    .payment-btn::before {
        content: "₱";
        font-weight: bold;
    }

    .delete-btn {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #dc3545;
    }

    .action-btn:hover {
        transform: scale(1.1);
        opacity: 0.8;
    }

    .completed-text {
        color: #666;
        font-size: 12px;
        font-style: italic;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .empty-icon {
        font-size: 48px;
        color: #ccc;
        margin-bottom: 20px;
    }

    .empty-message {
        font-size: 18px;
        font-weight: bold;
        color: #2d5016;
        margin-bottom: 10px;
    }

    .empty-description {
        color: #666;
        margin-bottom: 20px;
    }

    .empty-action-btn {
        background-color: #e8f5e8;
        border: 2px solid #2d5016;
        border-radius: 8px;
        padding: 12px 24px;
        color: #2d5016;
        text-decoration: none;
        font-weight: bold;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .empty-action-btn:hover {
        background-color: #2d5016;
        color: #ffffff;
        text-decoration: none;
    }

    .alert {
        border-radius: 8px;
        border: 2px solid #e8f5e8;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    /* Style for pre-selected services in the modal */
    #selectedServices option:checked {
        background-color: #d1ecf1;
        color: #0c5460;
        font-weight: 600;
    }
    
    #selectedServices option:checked::before {
        content: "✓ ";
        color: #28a745;
        font-weight: bold;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .clients-container {
            padding: 20px;
        }

        .page-title {
            font-size: 24px;
        }

        .section-title {
            font-size: 20px;
        }

        .table-header-row,
        .table-row {
            grid-template-columns: 1fr;
            gap: 0;
        }

        .table-header-cell,
        .table-cell {
            display: none;
        }

        .table-header-cell:first-child,
        .table-header-cell:nth-child(2),
        .table-header-cell:last-child,
        .table-cell:first-child,
        .table-cell:nth-child(2),
        .table-cell:last-child {
            display: flex;
        }

        .table-header-cell:first-child::before {
            content: "Name & Gender";
        }

        .table-header-cell:last-child::before {
            content: "Actions";
        }
    }

    /* In-Service Modal Styles */
    .in-service-modal .modal-dialog {
        max-width: 800px;
        margin: 30px auto;
    }

    .in-service-content {
        background-color: #f8f9fa;
        border: none;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .in-service-header {
        background-color: transparent;
        border-bottom: none;
        padding: 30px 30px 20px 30px;
        text-align: center;
    }

    .in-service-title {
        font-family: 'Georgia', 'Times New Roman', serif;
        font-size: 28px;
        font-weight: bold;
        color: #2d5016;
        margin: 0;
        letter-spacing: 0.5px;
    }

    .in-service-body {
        padding: 0 30px 30px 30px;
        background-color: #f8f9fa;
    }

    .client-info-display {
        margin-bottom: 30px;
        padding: 15px 20px;
        background-color: #ffffff;
        border: 1px solid #2d5016;
        border-radius: 6px;
    }

    .client-label {
        font-weight: bold;
        color: #2d5016;
        font-size: 16px;
    }

    .client-name {
        font-weight: bold;
        color: #137759;
        font-size: 16px;
        margin-left: 10px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto auto;
        gap: 20px;
        margin-bottom: 25px;
    }

    .form-section {
        display: flex;
        flex-direction: column;
    }

    .services-section {
        grid-column: 1 / 2;
        grid-row: 1 / 3;
    }

    .room-section {
        grid-column: 2 / 3;
        grid-row: 1 / 2;
    }

    .staff-section {
        grid-column: 2 / 3;
        grid-row: 2 / 3;
    }

    .notes-section {
        grid-column: 1 / 2;
        grid-row: 3 / 4;
    }

    .section-label {
        font-weight: bold;
        color: #2d5016;
        font-size: 16px;
        margin-bottom: 10px;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .services-container {
        border: 2px solid #2d5016;
        border-radius: 6px;
        background-color: #ffffff;
        padding: 10px;
        min-height: 200px;
    }

    .services-select {
        width: 100%;
        border: none;
        outline: none;
        background-color: transparent;
        font-size: 14px;
        color: #2d5016;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .services-select option {
        padding: 8px;
        border-bottom: 1px solid #e9ecef;
    }

    .services-select option:last-child {
        border-bottom: none;
    }

    .dropdown-select {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #2d5016;
        border-radius: 6px;
        background-color: #ffffff;
        font-size: 14px;
        color: #2d5016;
        font-family: 'Georgia', 'Times New Roman', serif;
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%232d5016' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 12px center;
        background-repeat: no-repeat;
        background-size: 16px;
        padding-right: 40px;
    }

    .dropdown-select:focus {
        outline: none;
        border-color: #137759;
        box-shadow: 0 0 0 2px rgba(19, 119, 89, 0.2);
    }

    .notes-container {
        border: 2px solid #2d5016;
        border-radius: 6px;
        background-color: #ffffff;
        padding: 10px;
    }

    .notes-textarea {
        width: 100%;
        border: none;
        outline: none;
        background-color: transparent;
        font-size: 14px;
        color: #2d5016;
        font-family: 'Georgia', 'Times New Roman', serif;
        resize: none;
        min-height: 100px;
    }

    .notes-textarea::placeholder {
        color: #999;
        font-style: italic;
    }

    .info-note {
        background-color: #ffffff;
        border: 2px solid #2d5016;
        border-radius: 6px;
        padding: 15px 20px;
        color: #2d5016;
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 25px;
    }

    .in-service-footer {
        background-color: #f8f9fa;
        border-top: none;
        padding: 20px 30px 30px 30px;
        display: flex;
        justify-content: flex-end;
        gap: 15px;
    }

    .save-btn, .cancel-btn {
        padding: 12px 24px;
        border: 2px solid #2d5016;
        border-radius: 6px;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Georgia', 'Times New Roman', serif;
        min-width: 100px;
    }

    .save-btn {
        background-color: #ffffff;
        color: #2d5016;
    }

    .save-btn:hover {
        background-color: #2d5016;
        color: #ffffff;
    }

    .cancel-btn {
        background-color: #ffffff;
        color: #2d5016;
    }

    .cancel-btn:hover {
        background-color: #2d5016;
        color: #ffffff;
    }

    /* Responsive Design for In-Service Modal */
    @@media (max-width: 768px) {
        .form-grid {
            grid-template-columns: 1fr;
            grid-template-rows: auto auto auto auto;
        }

        .services-section {
            grid-column: 1 / 2;
            grid-row: 1 / 2;
        }

        .room-section {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
        }

        .staff-section {
            grid-column: 1 / 2;
            grid-row: 3 / 4;
        }

        .notes-section {
            grid-column: 1 / 2;
            grid-row: 4 / 5;
        }

        .in-service-footer {
            flex-direction: column;
            align-items: center;
        }

        .save-btn, .cancel-btn {
            width: 100%;
            max-width: 200px;
        }
    }
</style>

@section Scripts {
    <script>
        let currentClientId = null;

        function setClientForInService(clientId, firstName, lastName) {
            currentClientId = clientId;
            document.getElementById('clientId').value = clientId;
            document.getElementById('clientName').textContent = firstName + ' ' + lastName;
            
            // Load data for the modal
            loadServices();
            loadRooms();
            loadStaff();
        }

        function loadServices() {
            fetch('/Client/GetServices')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('selectedServices');
                    select.innerHTML = '';
                    data.forEach(service => {
                        const option = document.createElement('option');
                        option.value = service.serviceId;
                        option.textContent = `${service.name} - $${service.price} (${service.duration} min)`;
                        select.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading services:', error));
        }

        function loadRooms() {
            fetch('/Client/GetRooms')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('selectedRoom');
                    select.innerHTML = '<option value="">-- Select Room --</option>';
                    data.forEach(room => {
                        const option = document.createElement('option');
                        option.value = room.roomId;
                        option.textContent = `${room.roomNumber} - ${room.roomType}`;
                        select.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading rooms:', error));
        }

        function loadStaff() {
            fetch('/Client/GetStaff')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('selectedStaff');
                    select.innerHTML = '<option value="">-- Select Staff --</option>';
                    data.forEach(staff => {
                        const option = document.createElement('option');
                        option.value = staff.staffId;
                        option.textContent = `${staff.fullName} - ${staff.expertise}`;
                        select.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading staff:', error));
        }

        function submitInService() {
            const form = document.getElementById('inServiceForm');
            const formData = new FormData(form);
            
            // Get selected services
            const selectedServices = Array.from(document.getElementById('selectedServices').selectedOptions)
                .map(option => option.value);
            
            if (selectedServices.length === 0) {
                alert('Please select at least one service.');
                return;
            }

            if (!formData.get('selectedRoom')) {
                alert('Please select a room.');
                return;
            }

            if (!formData.get('selectedStaff')) {
                alert('Please select a staff member.');
                return;
            }

            // Add selected services to form data
            formData.delete('selectedServices');
            selectedServices.forEach(serviceId => {
                formData.append('selectedServices', serviceId);
            });

            fetch('/Client/InService', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Client has been put in-service successfully!');
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while processing the request.');
            });
        }
    </script>
}